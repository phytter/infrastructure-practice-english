name: Infrastructure Deployment and Management

on:
  push:
    branches: 
      - staging
      - main
  pull_request:
    branches:
      - staging
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - deploy
          - destroy
      environment:
        description: 'Environment to manage'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  repository_dispatch:
    types: [update-backend]

permissions:
  contents: read
  pull-requests: write
  actions: write

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Determine Environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  terraform-plan:
    name: Terraform Plan
    needs: determine-environment
    if: ${{ github.event.inputs.action != 'destroy' }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.11.2'
          terraform_wrapper: false
          
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -diff
        continue-on-error: true
        
      - name: Terraform Initialize
        id: init
        run: |
          terraform init
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Set Backend Image Tag
        id: set-backend-image-tag
        run: |
          if [ -z "${{ github.event.client_payload.image_tag }}" ]; then
            echo "TF_VAR_backend_image_tag=practice-english-api:latest" >> $GITHUB_ENV
          else
            echo "TF_VAR_backend_image_tag=${{ github.event.client_payload.image_tag }}" >> $GITHUB_ENV
          fi
        
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_google_client_id: ${{ secrets.GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          TF_VAR_mongodb_url: ${{ secrets.MONGODB_URL }}
          TF_VAR_database_name: ${{ secrets.DATABASE_NAME }}
          TF_VAR_opensubtitles_api_key: ${{ secrets.OPENSUBTITLES_API_KEY }}
          TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}
          TF_VAR_backend_image_tag: ${{ env.TF_VAR_backend_image_tag }}
        run: |
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT
          terraform plan \
            -var="name_prefix=english" \
            -var="environment=$ENVIRONMENT" \
            -var-file="environments/$ENVIRONMENT/terraform.tfvars" \
            -out=tfplan
          
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan
          retention-days: 5

  terraform-apply:
    name: Terraform Apply
    needs: 
      - determine-environment
      - terraform-plan
    if: >
      (github.event_name == 'push' && 
       (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')) ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.action == 'deploy') ||
       (github.event_name == 'repository_dispatch')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
    env:
      AWS_REGION: us-east-1
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.11.2'
          terraform_wrapper: false
          
      - name: Terraform Initialize
        run: |
          terraform init
        
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
      
      - name: Terraform Apply
        run: |
          terraform workspace select $ENVIRONMENT
          terraform apply -auto-approve tfplan

  terraform-destroy:
    name: Terraform Destroy
    needs: determine-environment
    if: >
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}-destroy
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    env:
      AWS_REGION: us-east-1
      ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.11.2'
          terraform_wrapper: false
          
      - name: Terraform Initialize
        run: |
          terraform init
        
      - name: Terraform Destroy
        run: |
          terraform workspace select $ENVIRONMENT
          terraform destroy -auto-approve \
            -var="backend_image_tag=practice-english-api:latest" \
            -var="name_prefix=english" \
            -var="environment=$ENVIRONMENT" \
            -var-file="environments/$ENVIRONMENT/terraform.tfvars"